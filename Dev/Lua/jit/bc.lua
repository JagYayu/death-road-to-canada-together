----------------------------------------------------------------------------
-- LuaJIT bytecode listing module.
--
-- Copyright (C) 2005-2022 Mike Pall. All rights reserved.
-- Released under the MIT license. See Copyright Notice in luajit.h
----------------------------------------------------------------------------
--
-- This module lists the bytecode of a Lua function. If it's loaded by -jbc
-- it hooks into the parser and lists all functions of a chunk as they
-- are parsed.
--
-- Example usage:
--
--   luajit -jbc -e 'local x=0; for i=1,1e6 do x=x+i end; print(x)'
--   luajit -jbc=- foo.lua
--   luajit -jbc=foo.list foo.lua
--
-- Default output is to stderr. To redirect the output to a file, pass a
-- filename as an argument (use '-' for stdout) or set the environment
-- variable LUAJIT_LISTFILE. The file is overwritten every time the module
-- is started.
--
-- This module can also be used programmatically:
--
--   local bc = require("jit.bc")
--
--   local function foo() print("hello") end
--
--   bc.dump(foo)           --> -- BYTECODE -- [...]
--   print(bc.line(foo, 2)) --> 0002    KSTR     1   1      ; "hello"
--
--   local out = {
--     -- Do something with each line:
--     write = function(t, ...) io.write(...) end,
--     close = function(t) end,
--     flush = function(t) end,
--   }
--   bc.dump(foo, out)
--
------------------------------------------------------------------------------
local a=require("jit")assert(a.version_num==20100,"LuaJIT core/library version mismatch")local b=require("jit.util")local c=require("jit.vmdef")local d=require("bit")local e,f,g=string.sub,string.gsub,string.format;local h,i,j=string.byte,d.band,d.rshift;local k,l,m=b.funcinfo,b.funcbc,b.funck;local n=b.funcuvname;local o=c.bcnames;local p,q=io.stdout,io.stderr;local function r(s)if s=="\n"then return"\\n"elseif s=="\r"then return"\\r"elseif s=="\t"then return"\\t"else return g("\\%03d",h(s))end end;local function t(u,v,w)local x,y=l(u,v)if not x then return end;local z,A,B=i(y,7),i(y,15*8),i(y,15*128)local C=i(j(x,8),0xff)local D=6*i(x,0xff)local E=e(o,D+1,D+6)local F=g("%04d %s %-6s %3s ",v,w or"  ",E,z==0 and""or C)local G=j(x,16)if B==13*128 then return g("%s=> %04d\n",F,v+G-0x7fff)end;if A~=0 then G=i(G,0xff)elseif B==0 then return F.."\n"end;local H;if B==10*128 then H=m(u,-G-1)H=g(#H>40 and'"%.40s"~'or'"%s"',f(H,"%c",r))elseif B==9*128 then H=m(u,G)if E=="TSETM "then H=H-2^52 end elseif B==12*128 then local I=k(m(u,-G-1))if I.ffid then H=c.ffnames[I.ffid]else H=I.loc end elseif B==5*128 then H=n(u,G)end;if z==5 then local J=n(u,C)if H then H=J.." ; "..H else H=J end end;if A~=0 then local K=j(x,24)if H then return g("%s%3d %3d  ; %s\n",F,K,G,H)end;return g("%s%3d %3d\n",F,K,G)end;if H then return g("%s%3d      ; %s\n",F,G,H)end;if B==7*128 and G>32767 then G=G-65536 end;return g("%s%3d\n",F,G)end;local function L(u)local M={}for v=1,1000000000 do local x,y=l(u,v)if not x then break end;if i(y,15*128)==13*128 then M[v+j(x,16)-0x7fff]=true end end;return M end;local function N(u,O,P)if not O then O=p end;local I=k(u)if P and I.children then for Q=-1,-1000000000,-1 do local R=m(u,Q)if not R then break end;if type(R)=="proto"then N(R,O,true)end end end;O:write(g("-- BYTECODE -- %s-%d\n",I.loc,I.lastlinedefined))local M=L(u)for v=1,1000000000 do local F=t(u,v,M[v]and"=>")if not F then break end;O:write(F)end;O:write("\n")O:flush()end;local S,O;local function T(u)return N(u,O)end;local function U()if S then S=false;a.attach(T)if O and O~=p and O~=q then O:close()end;O=nil end end;local function V(W)if S then U()end;if not W then W=os.getenv("LUAJIT_LISTFILE")end;if W then O=W=="-"and p or assert(io.open(W,"w"))else O=q end;a.attach(T,"bc")S=true end;return{line=t,dump=N,targets=L,on=V,off=U,start=V}